# Read the Weather dataset after aggregating
weatherData <- read.csv("data/StormData_to2015_after_aggregating.csv")
# Get number of events by year
number.of.events.by.year <- weatherData[, list(COUNT = sum(COUNT)), by = list(YEAR)]
weatherData <- data.table(weatherData)
library('data.table')
# Read the Weather dataset after aggregating
weatherData <- read.csv("data/StormData_to2015_after_aggregating.csv")
weatherData <- data.table(weatherData)
# Get number of events by year
number.of.events.by.year <- weatherData[, list(COUNT = sum(COUNT)), by = list(YEAR)]
# Get the damage of population caused by weather events by year
population.damage.by.year <- rbind(weatherData[, list(total = sum(FATALITIES, na.rm = TRUE),
category = "FATALITIES"), by = list(YEAR)], weatherData[, list(total = sum(INJURIES,
na.rm = TRUE), category = "INJURIES"), by = list(YEAR)])
population.damage.by.year$category <- factor(population.damage.by.year$category,
labels = c("FATALITIES", "INJURIES"))
# Get the damage of property and crops caused by weather events by year
property.and.crop.damage.by.year <- rbind(weatherData[, list(total = sum(CROPS_DAMAGE,
na.rm = TRUE), category = "CROPS_DAMAGE"), by = list(YEAR)], weatherData[, list(total = sum(PROPERTY_DAMAGE,
na.rm = TRUE), category = "PROPERTY_DAMAGE"), by = list(YEAR)])
property.and.crop.damage.by.year$category <- factor(property.and.crop.damage.by.year$category,
labels = c("CROPS_DAMAGE", "PROPERTY_DAMAGE"))
library(ggplot2)
library(rCharts)
library(ggvis)
states_map <- map_data("state")
fill <- "Affected"
year_min <- 1950
year_max <- 2015
title <- sprintf(title, year_min, year_max)
library(reshape2)
library(dplyr)
library(mapproj)
library(maps)
library(ggthemes)
states_map <- map_data("state")
fill <- "Affected"
year_min <- 1950
year_max <- 2015
title <- sprintf(title, year_min, year_max)
# Draw Map
states_map <- map_data("state")
fill <- "Affected"
year_min <- '1950'
year_max <- '2015'
title <- sprintf(title, year_min, year_max)
# Draw Map
states_map <- map_data("state")
fill <- "Affected"
year_min <- "1950"
year_max <- "2015"
title <- sprintf(title, year_min, year_max)
# Draw Map
states_map <- map_data("state")
fill <- "Affected"
year_min <- "1950"
year_max <- "2015"
title <- "Population Impact %d - %d (Number of Affected)"
title <- sprintf(title, year_min, year_max)
# Draw Map
states_map <- map_data("state")
fill <- "Affected"
year_min <- 1950
year_max <- 2015
title <- "Population Impact %d - %d (Number of Affected)"
title <- sprintf(title, year_min, year_max)
p <- ggplot(population.damage.by.year, aes(map_id = STATE_NAME))
p <- p + geom_map(aes_string(fill = fill), map = states_map, colour='black')
p <- p + expand_limits(x = states_map$long, y = states_map$lat)
p <- p + coord_map() + theme_bw(base_size = 14)
p <- p + labs(x = "Long", y = "Lat", title = title)
p <- p + geom_point(x=5, y=5) + coord_fixed()
p + scale_fill_gradient(low = "#d3e992", high = "#669900")
population.damage.by.year$Affected <- population.damage.by.year$FATALITIES + population.damage.by.year$INJURIES
View(population.damage.by.year)
dt <- weatherData[!weatherData$STATE_NAME %in% c("american samoa", "atlantic north", "atlantic south", "district of columbia",
"e pacific", "guam", "gulf of alaska", "gulf of mexico", "hawaii waters", "lake erie", "lake huron",
"lake michigan", "lake ontario", "lake st clair", "lake superior", "puerto rico", "st lawrence r",
"virgin islands"),]
event_types <- sort(unique(dt$EVENT_TYPE))
aggregate_by_year <- function(dt, year_min, year_max, evtypes) {
round_2 <- function(x) round(x, 2)
# Filter
dt %>% filter(YEAR >= year_min, YEAR <= year_max, EVENT_TYPE %in% evtypes) %>%
# Group and aggregate
group_by(YEAR) %>% summarise_each(funs(sum), COUNT:CROPS_DAMAGE) %>%
# Round
mutate_each(funs(round_2), PROPERTY_DAMAGE, CROPS_DAMAGE) %>%
rename(
Year = YEAR, Count = COUNT,
Fatalities = FATALITIES, Injuries = INJURIES,
Property = PROPERTY_DAMAGE, Crops = CROPS_DAMAGE
)
}
data <- aggregate_by_year(weatherData, 1950, 2015, event_types)
View(data)
View(data)
data$Affected <- data$Fatalities + data$Injuries
View(data)
# Draw Map
states_map <- map_data("state")
fill <- "Affected"
year_min <- 1950
year_max <- 2015
title <- "Population Impact %d - %d (Number of Affected)"
title <- sprintf(title, year_min, year_max)
p <- ggplot(data, aes(map_id = STATE_NAME))
p <- p + geom_map(aes_string(fill = fill), map = states_map, colour='black')
p <- p + expand_limits(x = states_map$long, y = states_map$lat)
p <- p + coord_map() + theme_bw(base_size = 14)
p <- p + labs(x = "Long", y = "Lat", title = title)
p <- p + geom_point(x=5, y=5) + coord_fixed()
p + scale_fill_gradient(low = "#d3e992", high = "#669900")
aggregate_by_state <- function(dt, year_min, year_max, evtypes) {
replace_na <- function(x) ifelse(is.na(x), 0, x)
round_2 <- function(x) round(x, 2)
states <- data.table(STATE_NAME=sort(unique(dt$STATE_NAME)))
aggregated <- dt %>% filter(YEAR >= year_min, YEAR <= year_max, EVENT_TYPE %in% evtypes) %>%
group_by(STATE_NAME) %>%
summarise_each(funs(sum), COUNT:CROPS_DAMAGE)
# We want all states to be present even if nothing happened
left_join(states,  aggregated, by = "STATE_NAME") %>%
mutate_each(funs(replace_na), FATALITIES:CROPS_DAMAGE) %>%
mutate_each(funs(round_2), PROPERTY_DAMAGE, CROPS_DAMAGE)
}
data <- aggregate_by_state(weatherData, 1950, 2015, event_types)
data$Affected <- data$Fatalities + data$Injuries
View(data)
View(data)
View(data)
data$Affected <- data$FATALITIES + data$INJURIES
# Draw Map
states_map <- map_data("state")
fill <- "Affected"
year_min <- 1950
year_max <- 2015
title <- "Population Impact %d - %d (Number of Affected)"
title <- sprintf(title, year_min, year_max)
p <- ggplot(data, aes(map_id = STATE_NAME))
p <- p + geom_map(aes_string(fill = fill), map = states_map, colour='black')
p <- p + expand_limits(x = states_map$long, y = states_map$lat)
p <- p + coord_map() + theme_bw(base_size = 14)
p <- p + labs(x = "Long", y = "Lat", title = title)
p <- p + geom_point(x=5, y=5) + coord_fixed()
p + scale_fill_gradient(low = "#d3e992", high = "#669900")
weatherData$STATE_NAME <- weatherData(rawdt$STATE_NAME)
dt <- weatherData[!weatherData$STATE_NAME %in% c("american samoa", "atlantic north", "atlantic south", "district of columbia",
"e pacific", "guam", "gulf of alaska", "gulf of mexico", "hawaii waters", "lake erie", "lake huron",
"lake michigan", "lake ontario", "lake st clair", "lake superior", "puerto rico", "st lawrence r",
"virgin islands"),]
event_types <- sort(unique(dt$EVENT_TYPE))
data <- aggregate_by_state(weatherData, 1950, 2015, event_types)
data$Affected <- data$FATALITIES + data$INJURIES
# Draw Map
states_map <- map_data("state")
fill <- "Affected"
year_min <- 1950
year_max <- 2015
title <- "Population Impact %d - %d (Number of Affected)"
title <- sprintf(title, year_min, year_max)
p <- ggplot(data, aes(map_id = STATE_NAME))
p <- p + geom_map(aes_string(fill = fill), map = states_map, colour='black')
p <- p + expand_limits(x = states_map$long, y = states_map$lat)
p <- p + coord_map() + theme_bw(base_size = 14)
p <- p + labs(x = "Long", y = "Lat", title = title)
p <- p + geom_point(x=5, y=5) + coord_fixed()
p + scale_fill_gradient(low = "#d3e992", high = "#669900")
View(data)
library(data.table)
library(ggplot2)
library(rCharts)
library(ggvis)
library(reshape2)
library(dplyr)
library(mapproj)
library(maps)
library(ggthemes)
# Read the Weather dataset after aggregating
weatherData <- fread('data/StormData_to2015_after_aggregating.csv') %>% mutate(EVENT_TYPE = tolower(EVENT_TYPE))
weatherData <- data.table(weatherData)
View(weatherData)
weatherData$STATE_NAME <- weatherData(rawdt$STATE_NAME)
weatherData <- data.table(weatherData)
weatherData <- data.table(weatherData)
weatherData$STATE_NAME <- tolower(weatherData$STATE_NAME)
View(weatherData)
dt <- weatherData[!weatherData$STATE_NAME %in% c("american samoa", "atlantic north", "atlantic south", "district of columbia",
"e pacific", "guam", "gulf of alaska", "gulf of mexico", "hawaii waters", "lake erie", "lake huron",
"lake michigan", "lake ontario", "lake st clair", "lake superior", "puerto rico", "st lawrence r",
"virgin islands"),]
event_types <- sort(unique(dt$EVENT_TYPE))
aggregate_by_state <- function(dt, year_min, year_max, evtypes) {
replace_na <- function(x) ifelse(is.na(x), 0, x)
round_2 <- function(x) round(x, 2)
states <- data.table(STATE_NAME=sort(unique(dt$STATE_NAME)))
aggregated <- dt %>% filter(YEAR >= year_min, YEAR <= year_max, EVENT_TYPE %in% evtypes) %>%
group_by(STATE_NAME) %>%
summarise_each(funs(sum), COUNT:CROPS_DAMAGE)
# We want all states to be present even if nothing happened
left_join(states,  aggregated, by = "STATE_NAME") %>%
mutate_each(funs(replace_na), FATALITIES:CROPS_DAMAGE) %>%
mutate_each(funs(round_2), PROPERTY_DAMAGE, CROPS_DAMAGE)
}
data <- aggregate_by_state(weatherData, 1950, 2015, event_types)
data$Affected <- data$FATALITIES + data$INJURIES
View(data)
# Draw Map
states_map <- map_data("state")
fill <- "Affected"
year_min <- 1950
year_max <- 2015
title <- "Population Impact %d - %d (Number of Affected)"
title <- sprintf(title, year_min, year_max)
p <- ggplot(data, aes(map_id = STATE_NAME))
p <- p + geom_map(aes_string(fill = fill), map = states_map, colour='black')
p <- p + expand_limits(x = states_map$long, y = states_map$lat)
p <- p + coord_map() + theme_bw(base_size = 14)
p <- p + labs(x = "Long", y = "Lat", title = title)
p <- p + geom_point(x=5, y=5) + coord_fixed()
p + scale_fill_gradient(low = "#d3e992", high = "#669900")
title
